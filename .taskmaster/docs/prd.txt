<context>
# Overview  
本專案旨在建立一個基於 Semantic Kernel 的智慧股市查詢系統，透過 OpenAI Chat Completion 和 Function Calling 技術，讓使用者能夠用自然語言查詢股市資料。系統整合 Fugle API 獲取即時股市資訊，並使用 PgVector 儲存向量資料和對話記錄，為未來的強化學習奠定基礎。

# Core Features  
## 1. AI 對話引擎
- **功能**：基於 Semantic Kernel 和 OpenAI Chat Completion 建立智慧對話系統
- **重要性**：提供自然語言介面，降低使用者查詢股市資料的門檻
- **運作方式**：透過 GPT 模型理解使用者意圖，自動選擇合適的 Function Calling

## 2. 股市資料查詢
- **功能**：透過 Function Calling 串接 Fugle API 獲取股市資料
- **重要性**：提供準確即時的股市資訊，包含個股價格、走勢等資料
- **運作方式**：自動將使用者自然語言查詢轉換為 API 呼叫參數

## 3. 向量資料庫
- **功能**：使用 PgVector 儲存和檢索向量化資料
- **重要性**：支援語義搜尋和相似性比對，提升查詢精準度
- **運作方式**：將文本資料向量化後儲存，支援快速相似性檢索

## 4. 對話記錄系統
- **功能**：完整記錄使用者互動過程和系統回應
- **重要性**：為強化學習提供訓練資料，持續改善系統表現
- **運作方式**：記錄使用者輸入、系統回應、提示詞和評分資訊

# User Experience  
## 使用者角色
- **主要使用者**：股市投資者、分析師
- **次要使用者**：金融初學者

## 核心使用流程
1. 使用者以自然語言提出股市查詢
2. 系統理解查詢意圖並選擇合適的功能
3. 自動呼叫 Fugle API 獲取相關資料
4. 以易懂的方式呈現查詢結果
5. 記錄互動過程供後續分析

## UI/UX 考量
- 簡潔的對話介面
- 清晰的股市資料視覺化
- 即時回應機制
</context>
<PRD>
# Technical Architecture  
## 系統組件
- **前端**：對話介面 (Console/Web 介面)
- **AI 引擎**：Semantic Kernel + OpenAI GPT
- **Function Calling 層**：API 呼叫管理
- **資料層**：PostgreSQL + PgVector
- **外部整合**：Fugle API

## 資料模型
- **對話記錄表**：儲存完整對話歷史
- **向量資料表**：儲存文本向量和相關元資料
- **使用者評分表**：記錄互動品質評分
- **API 快取表**：暫存常用股市資料

## APIs 與整合
- **OpenAI API**：GPT 模型呼叫
- **Fugle API**：股市資料獲取
- **PgVector**：向量相似性搜尋

## 基礎設施需求
- PostgreSQL 資料庫 (含 PgVector 擴充)
- .NET 8 運行環境
- OpenAI API 金鑰
- Fugle API 存取權限

# Development Roadmap  
## Phase 1: MVP 核心功能
- 建立基本 Semantic Kernel 架構
- 實現 OpenAI Chat Completion 整合
- 建立簡單的 Console 介面
- 實現基礎 Function Calling 框架

## Phase 2: 股市資料整合
- 串接 Fugle API
- 實現個股資料查詢功能
- 建立資料快取機制
- 實現自然語言到 API 參數的轉換

## Phase 3: 向量資料庫
- 建立 PostgreSQL + PgVector 環境
- 實現文本向量化功能
- 建立向量相似性搜尋
- 整合向量搜尋到查詢流程

## Phase 4: 對話記錄與分析
- 建立完整的對話記錄系統
- 實現評分機制
- 建立資料分析基礎
- 準備強化學習資料集

## Phase 5: 進階功能
- Web 介面開發
- 進階股市分析功能
- 個人化推薦系統
- 強化學習模型整合

# Logical Dependency Chain
## 基礎建設階段
1. **Semantic Kernel 基礎**：建立 AI 對話的核心框架
2. **資料庫設置**：PostgreSQL + PgVector 環境準備
3. **API 整合基礎**：建立外部 API 呼叫機制

## 核心功能開發
4. **Function Calling 實現**：讓 AI 能夠呼叫外部功能
5. **Fugle API 整合**：實現股市資料獲取
6. **基本對話功能**：完成 MVP 可用版本

## 進階功能擴展
7. **向量搜尋功能**：提升查詢精準度
8. **對話記錄系統**：為強化學習準備資料
9. **使用者介面優化**：提升使用體驗

# Risks and Mitigations  
## 技術挑戰
- **風險**：Semantic Kernel 和 Function Calling 整合複雜度
- **緩解**：先建立簡單的 Function Calling 原型，逐步擴展功能

- **風險**：PgVector 性能問題
- **緩解**：進行性能測試，必要時考慮向量資料分片策略

## MVP 定義挑戰
- **風險**：功能範圍過於複雜，延遲交付
- **緩解**：專注於核心的自然語言股市查詢功能，其他功能分階段實現

## 資源限制
- **風險**：OpenAI API 費用控制
- **緩解**：實現請求快取機制，避免重複查詢

- **風險**：Fugle API 限制
- **緩解**：了解 API 限制，實現適當的請求頻率控制

# Appendix  
## 技術規格
- **.NET 版本**：.NET 8
- **資料庫**：PostgreSQL 15+ with PgVector
- **AI 框架**：Microsoft Semantic Kernel
- **OpenAI 模型**：GPT-4 或 GPT-3.5-turbo

## 研究發現
- Function Calling 在金融資料查詢場景的適用性高
- PgVector 在中小型向量資料集的性能表現良好
- 自然語言到結構化查詢的轉換需要良好的 Prompt Engineering
</PRD>
